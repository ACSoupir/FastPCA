% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/umap.R
\name{umap}
\alias{umap}
\title{umap}
\usage{
umap(
  pc_scores,
  n_neighbors = 15,
  n_components = 2,
  method = c("uwot", "umap-learn"),
  metric = "euclidean",
  min_dist = 0.1,
  cores = 4,
  seed = -1,
  densemap = TRUE,
  dense_lambda = 2,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{pc_scores}{Matrix: exported from \code{get_pc_scores()}}

\item{n_neighbors}{Integer: number of nearest neighbors to use}

\item{n_components}{Integer: number of UMAP dimensions to calculate}

\item{method}{Character: The backend method for calculating UMAP (either 'uwot' or 'umap-learn'). Default is 'uwot'.}

\item{metric}{Character: How to calculate similarity. See details below for more informaation.}

\item{min_dist}{Numeric: minimum distance to consider}

\item{cores}{Integer: Number of cores to use for UMAP calculation}

\item{seed}{Integer: reproducibility seed. If cores > 1 or seed equals \code{-1}, seed will be ignored.}

\item{densemap}{Boolean: whether to use DensMAP for local densities}

\item{dense_lambda}{Numeric: value to apply for local density. Default: 2. higher values prioritize local density while low values are closer to typical UMAP}

\item{verbose}{Boolean: whether to be verbose in function calls}

\item{...}{other parameters to pass to \code{uwot::umap} directly}
}
\value{
matrix with UMAP reductions
}
\description{
umap
}
\details{
\code{method}:

Currently, there are two ways that UMAP can be calculated: 'uwot' or 'umap-learn'.
To use 'uwot', it's simply the installation of a dependency (likely already installed if FastPCA is installed).
This is the same method that is default for Seurat, and is very efficient and fast.
Some of the parameters that are explicit in the function call (like \code{n_neighbors} and \code{n_components})
are passed while others shown in \code{uwot::umap}'s documentation can be passed by the \code{...}.

Alternatively, there is a python method called \code{umap-learn}. To use this, a conda environment is preferred.
\code{FastPCA} provides interfaces to create and then activate the environment with \code{FastPCA::setup_py_env()} and
\code{FastPCA::start_FastPCA_env()}. Something to keep in mind, that if using this method it's recommended (required?)
to restart your R session, load \code{FastPCA}, then \code{FastPCA::start_FastPCA_env()}. There are system level conflicts
somwhere between \code{reticulate} and R's \code{torch} package.

\code{metric}:

There are many metrics that are supported in the python implementation. Here
are the list in the \href{https://umap-learn.readthedocs.io/en/latest/parameters.html#metric}{documentation}
for the umap function;
\itemize{
\item Minkowski syle metrics: "euclidean", "manhattan", "chebyshev", "minkowski";
\item Miscellaneous spatial metrics: "canberra", "braycurtis", "haversine";
\item Normalized spatial metrics: "mahalanobis", "wminkowski", "seuclidean";
\item Angular and correlation metrics: "cosine", "correlation";
\item Metrics for binary data: "hamming", "jaccard", "dice", "russellrao", "kulsinski", "rogerstanimoto", "sokalmichener", "sokalsneath", "yule"
}
}
