% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/start_FastPCA_env.R
\name{start_FastPCA_env}
\alias{start_FastPCA_env}
\title{Activate python environment for FastPCA}
\usage{
start_FastPCA_env(
  method = c("conda", "virtualenv"),
  envname = "FastPCA",
  required = FALSE
)
}
\arguments{
\item{method}{Character string. The method to use for environment creation.
Can be "conda" (default) or "virtualenv".}

\item{envname}{Character string. The name of the Python environment to create/use.
Defaults to "FastPCA".}

\item{required}{boolean passed to \code{reticulate}}
}
\value{
Invisibly returns \code{TRUE} if setup is successful, \code{FALSE} otherwise.
}
\description{
Activate python environment for FastPCA
}
\details{
Using a conda environment can allow for quick testing of new versions of pytorch and tinygrad.
However, it should be used with some caution. For example, if you have already used the 'rtorch' backend
in some other functions, not even necessarily part of this package, using \code{start_FastPCA_env} will attach
the conda environment but the modules in the environment won't be available. This is a system level
conflict between something in reticulate and torch (maybe libtorch variables?). Because of this,
it is really only recommended to use the python envronment if wanting to use the absolute latest
version of torch (and in the future tinygrad) to compare performance (accuracy and speed). Otherwise,
the rtorch implementation is likely sufficient.
}
\examples{
\dontrun{
  #for conda
  setup_py_env(method = "conda", envname = "FastPCA",
    python_version = "3.9", backend = "all", cuda = FALSE)
  start_fpca_env
}
}
